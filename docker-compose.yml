version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: health-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: health_tracker
      POSTGRES_USER: health_user
      POSTGRES_PASSWORD: health_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - health-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U health_user -d health_tracker"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: health-tracker-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@healthtracker.com
      PGADMIN_DEFAULT_PASSWORD: admin_password_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - health-tracker-network
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: health-tracker-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://health_user:health_password_2024@postgres:5432/health_tracker
      JWT_SECRET: dev_jwt_secret_2024
      CORS_ORIGIN: http://localhost:8000
    depends_on:
      postgres:
        condition: service_healthy
    command: ["npm", "run", "start:skip-setup"]
    ports:
      - "3000:3000"
    networks:
      - health-tracker-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: health-tracker-frontend
    restart: unless-stopped
    environment:
      API_UPSTREAM: http://backend:3000
      PORT: 8080
    depends_on:
      backend:
        condition: service_started
    ports:
      - "8000:8080"
    networks:
      - health-tracker-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  health-tracker-network:
    driver: bridge 