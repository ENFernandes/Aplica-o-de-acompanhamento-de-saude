version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: health-tracker-postgres
    environment:
      POSTGRES_DB: health_tracker
      POSTGRES_USER: health_user
      POSTGRES_PASSWORD: health_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U health_user -d health_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: health-tracker-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://health_user:health_password_2024@postgres:5432/health_tracker
      JWT_SECRET: dev_jwt_secret_2024
      CORS_ORIGIN: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (opcional para desenvolvimento)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: health-tracker-frontend
    environment:
      VITE_API_URL: http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: health-tracker-network
